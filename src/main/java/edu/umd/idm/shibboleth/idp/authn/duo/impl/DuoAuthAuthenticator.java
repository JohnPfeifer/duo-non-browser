/*
 * Licensed to the University Corporation for Advanced Internet Development,
 * Inc. (UCAID) under one or more contributor license agreements.  See the
 * NOTICE file distributed with this work for additional information regarding
 * copyright ownership. The UCAID licenses this file to You under the Apache
 * License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package edu.umd.idm.shibboleth.idp.authn.duo.impl;

import java.net.URI;
import java.security.GeneralSecurityException;

import javax.annotation.Nonnull;

import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.methods.RequestBuilder;
import org.apache.http.client.utils.URIBuilder;

import com.fasterxml.jackson.core.type.TypeReference;

import edu.umd.idm.shibboleth.idp.authn.context.DuoAuthenticationContext;
import edu.umd.idm.shibboleth.idp.authn.duo.DuoAuthApi;
import net.shibboleth.idp.authn.duo.DuoIntegration;

/**
 * Implementation of the the Duo AuthApi /v2/auth endpoint.
 */
public class DuoAuthAuthenticator extends AbstractDuoAuthenticator {

    /** a TypeReference for the repsonse generated by the endpoint. */
    @Nonnull private final TypeReference<DuoResponseWrapper<DuoAuthResponse>> wrapperTypeRef;

    /** Constructor. */
    public DuoAuthAuthenticator() {
        super();
        wrapperTypeRef = new TypeReference<DuoResponseWrapper<DuoAuthResponse>>() {};
    }

    /**
     * Perform an authentication action via the Duo AuthApi /auth endpoint.
     * 
     * @param duoContext Duo authentication context to use
     * @param duoIntegration Duo integration to use
     * 
     * @return a {@link DuoAuthResponse}
     * 
     * @throws GeneralSecurityException
     */
    @Override public DuoAuthResponse authenticate(@Nonnull final DuoAuthenticationContext duoContext,
            @Nonnull final DuoIntegration duoIntegration) throws GeneralSecurityException {

        try {
            // prepare the request
            final URI uri = new URIBuilder().setScheme("https").setHost(duoIntegration.getAPIHost())
                    .setPath("/auth/v2/auth").build();
            final RequestBuilder rb =
                    RequestBuilder.post().setUri(uri).addParameter("username", duoContext.getUsername());
            if (duoContext.getFactor() != null) {
                rb.addParameter(DuoAuthApi.DUO_FACTOR, duoContext.getFactor());
            }
            if (duoContext.getDevice() != null) {
                rb.addParameter(DuoAuthApi.DUO_DEVICE, duoContext.getDevice());
            }
            if (duoContext.getPasscode() != null) {
                rb.addParameter(DuoAuthApi.DUO_PASSCODE, duoContext.getPasscode());
            }
            DuoSupport.signRequest(rb, duoIntegration);
            final HttpUriRequest request = rb.build();

            // do it
            return doApiRequest(request, wrapperTypeRef).getResponse();
        } catch (final Exception ex) {
            throw new GeneralSecurityException("Unable to perform Duo AuthAPI auth request: " + ex.getMessage());
        }
    }

}
